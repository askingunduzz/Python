# -*- coding: utf-8 -*-
"""ADA440-ALE4.ipynb adlı not defterinin kopyası

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18k-w9iCfAZ8_HVwOXi10NQNPguMStP1m

## Follow the instructions, and write your codes in the right cells.
[![Open in Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/y-akbal/Tedu_Python_for_DS/blob/main/ALE/ADA440-ALE4.ipynb)
"""



#### Run this cell as this cell will download some necessary files for your exercises.
### Run the following function, do not change any line of it.
import requests
def download_text():
    data_url1 = 'https://raw.githubusercontent.com/y-akbal/Tedu_Python_for_DS/main/data/USvideos.csv'
    "Data_Visualizations/Dynamic_Visuals_Using_Date_Range_Slicers_Pt1/data/USvideos.csv"
    text1 = requests.get(data_url1)
    with open("USvideos.csv","a") as file:
        file.write(text1.text)
try:
    text = download_text()
    print("Text downloaded succesfully!! the name of the file is USvideos.csv")
except Exception as a:
  print(f"Something went wrong body that is: {a}")

## Import pandas
##
## Your code here
import pandas as pd

## Read the youtube dataset ("USvideos.csv")
##
## Your code here

# Read the dataset
df = pd.read_csv("USvideos.csv")

# Display the first few rows of the dataset
print(df.head())

## Inspect the dataset, delete the following columns
## a) video_id
## b) thumbnail_link
## c) publish_time
## d) channel_title
## e) title
## f) omments_disabled, ratings_disabled

# Delete the specified columns
columns_to_delete = ['video_id', 'thumbnail_link', 'publish_time', 'channel_title', 'title', 'comments_disabled', 'ratings_disabled']
df = df.drop(columns_to_delete, axis=1)

# Display the updated dataset
print(df.head())

## Are there any missing values in your dataset?
##
## Your code here
# Check for missing values
missing_values = df.isnull().sum()

# Display the missing values count
print(missing_values)

## What is the average number of likes?
##
## Your code here
# Convert 'likes' column to numeric with handling non-numeric values
df['likes'] = pd.to_numeric(df['likes'], errors='coerce')

# Calculate the average number of likes
average_likes = df['likes'].mean()

# Display the average number of likes
print("Average number of likes:", average_likes)

## What is the average number of dislikes?
##

# Convert 'dislikes' column to numeric with handling non-numeric values
df['dislikes'] = pd.to_numeric(df['dislikes'], errors='coerce')

# Calculate the average number of dislikes
average_dislikes = df['dislikes'].mean()

# Display the average number of dislikes
print("Average number of dislikes:", average_dislikes)

## What is the title of the video that has the highest views?
##
## Your code here




# Convert 'views' column to numeric if necessary
if df['views'].dtype != 'int64' and df['views'].dtype != 'float64':
    df['views'] = pd.to_numeric(df['views'], errors='coerce')

# Find the index of the video with the highest views
index_of_max_views = df['views'].idxmax()

# Get the title of the video with the highest views
video_title = df.loc[index_of_max_views, 'title']


print("Title of the video with the highest views:", video_title)

## What is average number of comments in each category with respect to category_id?
##
## Your code here

# Convert 'comment_count' column to numeric
df['comment_count'] = pd.to_numeric(df['comment_count'], errors='coerce')

# Calculate the average number of comments in each category
average_comments_by_category = df.groupby('category_id')['comment_count'].mean()

# Display the average number of comments in each category
print(average_comments_by_category)

## How many videos are there in each category?
##
## Your code here

# Count the number of videos in each category
video_count_by_category = df['category_id'].value_counts()

# Display the number of videos in each category
print(video_count_by_category)

## What is the title of the video that has the largest number of tags?
##
## Your code here
# Calculate the length of each tag
df['tag_length'] = df['tags'].str.split('|').apply(len)

# Find the index of the video with the largest number of tags
index_of_max_tags = df['tag_length'].idxmax()

# Get the title of the video with the largest number of tags
video_title = df.loc[index_of_max_tags, 'title']

# Display the title of the video with the largest number of tags
print("Title of the video with the largest number of tags:", video_title)

