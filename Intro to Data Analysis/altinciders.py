# -*- coding: utf-8 -*-
"""altinciDers.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14WpXkuySCoAtWTBtjPwJTMGr7aG9nDh2
"""

##data visualization
## how to come up with a fake data next week
import matplotlib.pyplot as plt
import seaborn as sns

##To create some fake data, lets import some libraries that are to be explained next week.
import numpy as np
x=np.random.randn(100)

##y=np.random.randn(100)
f=lambda x : x**2
y=f(x)



##plt.plot(x,y)    #this doesnt look like a function

##plt.scatter(x,y)  ##this is better

plt.scatter(x,y)  ##we use scatter to sketch graph of functions both x and y should be defined.

##plt.plot(y)  ##interesting

##To create some fake data, lets import some libraries that are to be explained next week.
import numpy as np
x=np.arange(-10,10,0.1)  ##nothing but arrange (-10,10)
f=lambda x:x**2
y=f(x)
plt.plot(x,y)

import numpy as np
x=np.arange(-2,2,0.1)  ##nothing but arrange (-10,10)
f=lambda x:x**2
g=lambda x:-x**3
y=f(x)
y_=g(x)
plt.plot(x,y)
plt.plot(x,y_)



plt.plot(x,y,label="x**2")  ##first plot

plt.plot(x,y,label = "x**2", color="red")
plt.plot(x,y_,label = "x**3", color="black")
plt.legend()
plt.show()         ##do not forget these!

plt.plot(x,y,label = "x**2", color="red")
plt.plot(x,y_,label = "x**3", color="black")
         ##do not forget these! :
plt.xlabel("Temp")
plt.ylabel("someting")
plt.title("title for graph")
plt.legend()

plt.show()

h=lambda x : -X**3
plt.plot(x,y,label = "x**2", color="red")
plt.plot(x,y_,label = "x**3", color="black")
         ##do not forget these! :
plt.xlabel("Temp")
plt.ylabel("someting")
plt.title("title for graph")
plt.legend()
plt.show()

import sklearn
from sklearn.datasets import load_digits

data=load_digits()

data["data"]           ##dictionary

data

##

data["target"][100]

x=data["data"].reshape(-1,8,8)       ##x is an array of arrays

plt.imshow(x[0])
plt.title("this is 4")
plt.show()

fig, ax = plt.subplots(3,3, figsize=(7,7))
for i in range(3):
  for j in range(3):
    ax[i,j].imshow(x[(i+20)*(j+10)])
    label=data["target"][(i+20)*(j+10)]
    ax[i,j].set_title(f"label is: {label}")
fig.suptitle("This is a nice thing!")
plt.tight_layout()
plt.show()

#type(ax)
#ax.shape
#ax[0,0]
#ax[0,1]
#ax[1,1]

##dimensinality reduction method = pca
##there is the notion of dimensinolatiy reduction techniques
x[0].shape
x=x.reshape(-1,64)

x.shape        ## 8*8 matrix
##To visualize x, it should be of dimesnion (1797,2)

from sklearn.decomposition import PCA   ##its consequence is important for us

pca=PCA(n_components=2)
x_=pca.fit_transform(x)

x_.shape

data["target"]

x_.shape

plt.scatter(x_[data["target"]==2,0],x_[data["target"]==2,1])

plt.scatter(x_[data["target"]==1,0],x_[data["target"]==1,1])

for i in range(9):
  plt.scatter(x_[data["target"]==i, 0], x_[data["target"]==i, 1],label=f"{i}")
plt.legend()
plt.show()

import seaborn as sns

sns.load_dataset    ## it has thousands of datasets

data_set=sns.load_dataset("tips")

data_set

sns.get_dataset_names()

data_set2=sns.load_dataset("titanic")
data_set2

data_set=sns.load_dataset("iris")
data_set



type(data_set)

x=data_set.iloc[:,:-1]

np.unique(data_set["species"])

pca=PCA(n_components=2)
x_=pca.fit_transform(x)

unique_labels=np.unique(data_set["species"])

for label in unique_labels:
  plt.scatter(x_[data_set.iloc[:,-1]==label,0],x_[data_set.iloc[:,-1]==label,1],label=label)
plt.legend()
plt.show()

data_set

## heatmap

data_set=sns.load_dataset("iris")

data_set.corr()

sns.heatmap(data_set.corr())

##functinolaties of seaborn
##internetten bul
##hoca kodlarını bulup degistirdi
## pairplot
##lineplot : mr images of brain
##violinplot
#interpreting graphs
##learn these before next week!
##numpy!!!!!, pandas